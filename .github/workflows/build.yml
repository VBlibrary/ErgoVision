name: Build

on:
  push:
    paths:
      - ".github/workflows/build.yml"
      - "app/**"
  pull_request:
    paths:
      - ".github/workflows/build.yml"
      - "app/**"
  schedule:
    - cron: "22 4 * * *"

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}-${{ github.event_name == 'schedule' }}
  cancel-in-progress: true

permissions: {}

jobs:
  compile-matrix:
    if: ${{ !cancelled() }}
    runs-on: ubuntu-latest
    outputs:
      include-list: ${{ steps.compile-list.outputs.result }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Join build lists
        uses: actions/github-script@v7
        id: compile-list
        with:
          script: |
            const coreCoverage = `${{ needs.core-coverage.outputs.core-include }}` || "[]";
            const boardChanges = `${{ needs.board-changes.outputs.boards-include }}` || "[]";
            const nightly = `${{ needs.nightly.outputs.nightly-include }}` || "[]";

            const combined = [
              ...JSON.parse(coreCoverage),
              ...JSON.parse(boardChanges),
              ...JSON.parse(nightly)
            ];
            const combinedUnique = [...new Map(combined.map(el => [JSON.stringify(el), el])).values()];

            const perBoard = {};

            for (const configuration of combinedUnique) {
              if (!perBoard[configuration.board])
                perBoard[configuration.board] = [];

              perBoard[configuration.board].push({
                shield: configuration.shield,
                'cmake-args': configuration['cmake-args'],
                nickname: configuration.nickname
              })
            }

            return Object.entries(perBoard).map(([board, shieldArgs]) => ({
              board,
              shieldArgs: JSON.stringify(shieldArgs),
            }));
  build:
    if: ${{ always() }}
    runs-on: ubuntu-latest
    container:
      image: docker.io/zmkfirmware/zmk-build-arm:3.5
    needs: compile-matrix
    strategy:
      matrix:
        include: ${{ fromJSON(needs.compile-matrix.outputs.include-list) }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          persist-credentials: false
      - name: Cache west modules
        uses: actions/cache@v4
        env:
          cache-name: cache-zephyr-modules
        with:
          path: |
            modules/
            tools/
            zephyr/
            bootloader/
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('app/west.yml') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-
        timeout-minutes: 2
        continue-on-error: true
      - name: Initialize workspace (west init)
        run: west init -l app
      - name: Update modules (west update)
        run: west update
      - name: Export Zephyr CMake package (west zephyr-export)
        run: west zephyr-export
      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "14.x"
      - name: Install @actions/artifact
        run: npm install @actions/artifact
      - name: Build
        uses: actions/github-script@v7
        id: boards-list
        with:
          script: |
            const fs = require('fs');
            const execSync = require('child_process').execSync;

            const buildShieldArgs = JSON.parse(`${{ matrix.shieldArgs }}`);

            let error = false;

            for (const shieldArgs of buildShieldArgs) {
              try {
                console.log(`::group::${{ matrix.board }} ${shieldArgs.shield} Build`)

                const output = execSync(`west build -s app -p -b ${{ matrix.board }} -- ${shieldArgs.shield ? '-DSHIELD="' + shieldArgs.shield + '"' : ''} ${shieldArgs['cmake-args'] || ''}`);

                console.log(output.toString());
              } catch (e) {
                console.error(`::error::Failed to build ${{ matrix.board }} ${shieldArgs.shield} ${shieldArgs['cmake-args']}`);
                console.error(e);
                error = true;
              } finally {
                console.log('::endgroup::');
              }
            }

            if (error) {
              throw new Error('Failed to build one or more configurations');
            }
      - name: Upload artifacts
        uses: actions/github-script@v7
        continue-on-error: ${{ github.event_name == 'pull_request' }}
        id: boards-upload
        with:
          script: |
            const fs = require('fs');
            const {default: artifact} = require('@actions/artifact');

            const buildShieldArgs = JSON.parse(`${{ matrix.shieldArgs }}`);

            let error = false;

            for (const shieldArgs of buildShieldArgs) {
              try {
                console.log(`::group::${{ matrix.board }} ${shieldArgs.shield} Upload`)

                const fileExtensions = ["hex", "uf2"];

                const files = fileExtensions
                  .map(extension => "build/zephyr/zmk." + extension)
                  .filter(path => fs.existsSync(path));

                const rootDirectory = 'build/zephyr';
                const options = {
                    continueOnError: true
                }

                const cmakeName = shieldArgs['cmake-args'] ? '-' + (shieldArgs.nickname || shieldArgs['cmake-args'].split(' ').join('')) : '';
                const artifactName = `${{ matrix.board }}${shieldArgs.shield ? '-' + shieldArgs.shield : ''}${cmakeName}-zmk`;

                await artifact.uploadArtifact(artifactName, files, rootDirectory, options);
              } catch (e) {
                console.error(`::error::Failed to upload ${{ matrix.board }} ${shieldArgs.shield} ${shieldArgs['cmake-args']}`);
                console.error(e);
                error = true;
              } finally {
                console.log('::endgroup::');
              }
            }

            if (error) {
              throw new Error('Failed to build one or more configurations');
            }
  core-coverage:
    if: ${{ needs.get-changed-files.outputs.core-changes == 'true' }}
    runs-on: ubuntu-latest
    needs: get-changed-files
    outputs:
      core-include: ${{ steps.core-list.outputs.result }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          persist-credentials: false
      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "14.x"
      - name: Install js-yaml
        run: npm install js-yaml
      - uses: actions/github-script@v7
        id: core-list
        with:
          script: |
            const fs = require('fs');
            const yaml = require('js-yaml');

            const coreCoverage = yaml.load(fs.readFileSync('app/core-coverage.yml', 'utf8'));

            let include = coreCoverage.board.flatMap(board =>
              coreCoverage.shield.map(shield => ({ board, shield }))
            );

            include = include.concat(coreCoverage.include || []);

            return include;
  board-changes:
    if: ${{ needs.get-changed-files.outputs.board-changes == 'true' }}
    runs-on: ubuntu-latest
    needs: [get-grouped-hardware, get-changed-files]
    outputs:
      boards-include: ${{ steps.boards-list.outputs.result }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "14.x"
      - name: Install js-yaml
        run: npm install js-yaml
      - uses: actions/github-script@v7
        id: boards-list
        with:
          script: |
            const fs = require('fs');
            const yaml = require('js-yaml');
            const glob = require('@actions/glob');

            const changedFiles = JSON.parse(`${{ needs.get-changed-files.outputs.changed-files }}`);
            const metadata = JSON.parse(`${{ needs.get-grouped-hardware.outputs.organized-metadata }}`);
            const boardChanges = new Set(changedFiles.filter(f => f.startsWith('app/boards')).map(f => f.split('/').slice(0, 4).join('/')));

            return (await Promise.all([...boardChanges].flatMap(async bc => {
              const globber = await glob.create(bc + "/*.zmk.yml");
              const files = await globber.glob();

              const aggregated = files.flatMap((f) =>
                yaml.loadAll(fs.readFileSync(f, "utf8"))
              );

              const boardAndShield = (b, s) => {
                if (s.siblings) {
                  return s.siblings.map(shield => ({
                    board: b.id,
                    shield,
                  }));
                } else {
                  return {
                   
